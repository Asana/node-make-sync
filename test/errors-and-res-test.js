// Generated by CoffeeScript 1.3.1
(function() {
  var MakeSync, Sync, should, _ref;

  should = require('should');

  _ref = require('../lib/make-sync'), Sync = _ref.Sync, MakeSync = _ref.MakeSync;

  describe("sync", function() {
    describe("error with error_type: 'callback'", function() {
      return it("should throw Shit", function(done) {
        var f, syncF;
        f = function(done) {
          return done("Shit happens!");
        };
        syncF = MakeSync(f, {
          error_type: 'callback'
        });
        return Sync(function() {
          (function() {
            return syncF();
          }).should["throw"](/Shit/);
          return done();
        });
      });
    });
    describe("normal result with error_type: 'none'", function() {
      return it("expect Shit", function(done) {
        var f, syncF;
        f = function(done) {
          return done("Shit happens!", "Shit happens again!");
        };
        syncF = MakeSync(f, {
          error_type: 'none'
        });
        return Sync(function() {
          var i, res, _i, _len, _ref1;
          res = syncF();
          _ref1 = [0, 1];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            i = _ref1[_i];
            should.exist(res[i].match(/Shit/));
          }
          return done();
        });
      });
    });
    describe("single result without error_type specified", function() {
      return it("expect Shit", function(done) {
        var f, syncF;
        f = function(done) {
          return done("Shit happens!");
        };
        syncF = MakeSync(f);
        return Sync(function() {
          var res;
          res = syncF();
          should.exist(res.match(/Shit/));
          return done();
        });
      });
    });
    describe("null error + result without error_type specified", function() {
      return it("expect Shit", function(done) {
        var f, syncF;
        f = function(done) {
          return done(null, "Shit happens!");
        };
        syncF = MakeSync(f);
        return Sync(function() {
          var res;
          res = syncF();
          should.exist(res.match(/Shit/));
          return done();
        });
      });
    });
    describe("error + result without error_type specified", function() {
      return it("let client handle Shit", function(done) {
        var f, syncF;
        f = function(done) {
          return done("Shit happens!", "Shit happens agains!");
        };
        syncF = MakeSync(f);
        return Sync(function() {
          var i, res, _i, _len, _ref1;
          res = syncF();
          _ref1 = [0, 1];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            i = _ref1[_i];
            should.exist(res[i].match(/Shit/));
          }
          return done();
        });
      });
    });
    describe("single result", function() {
      return it("should return one cake", function(done) {
        var f, syncF;
        f = function(done) {
          return done(null, "a cake");
        };
        syncF = MakeSync(f, {
          error_type: 'callback'
        });
        return Sync(function() {
          var res;
          res = syncF();
          res.should.equal("a cake");
          return done();
        });
      });
    });
    return describe("multiple result", function() {
      return it("should return three cakes", function(done) {
        var f, syncF;
        f = function(done) {
          return done(null, "a cake", "a cake", "a cake");
        };
        syncF = MakeSync(f, {
          error_type: 'callback'
        });
        return Sync(function() {
          var i, res, _i;
          res = syncF();
          for (i = _i = 0; _i <= 2; i = ++_i) {
            res[i].should.equal("a cake");
          }
          return done();
        });
      });
    });
  });

}).call(this);
