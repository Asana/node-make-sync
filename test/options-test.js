// Generated by CoffeeScript 1.3.1
(function() {
  var Options, should;

  should = require('should');

  Options = require('../lib/options').Options;

  describe("options", function() {
    describe("isIncluded", function() {
      describe("default", function() {
        return it("include all", function(done) {
          var options, res;
          options = new Options();
          res = (options.isIncluded('f')).should.be.ok;
          return done();
        });
      });
      describe("* rule", function() {
        it("exclude", function(done) {
          var options;
          options = new Options({
            exclude: '*'
          });
          (options.isIncluded('f')).should.not.be.ok;
          return done();
        });
        return it("include", function(done) {
          var options;
          options = new Options({
            exclude: '*',
            include: '*'
          });
          (options.isIncluded('f')).should.be.ok;
          return done();
        });
      });
      describe("regex rule", function() {
        it("exclude", function(done) {
          var options;
          options = new Options({
            exclude: /^_/
          });
          (options.isIncluded('f')).should.be.ok;
          (options.isIncluded('_f')).should.not.be.ok;
          return done();
        });
        return it("include", function(done) {
          var options;
          options = new Options({
            exclude: '*',
            include: /^f/
          });
          (options.isIncluded('f')).should.be.ok;
          (options.isIncluded('g')).should.not.be.ok;
          return done();
        });
      });
      describe("string rule", function() {
        it("exclude", function(done) {
          var options;
          options = new Options({
            exclude: '_f'
          });
          (options.isIncluded('f')).should.be.ok;
          (options.isIncluded('f_f')).should.be.ok;
          (options.isIncluded('_f')).should.not.be.ok;
          return done();
        });
        return it("include", function(done) {
          var options;
          options = new Options({
            exclude: '*',
            include: 'f'
          });
          (options.isIncluded('f')).should.be.ok;
          (options.isIncluded('fff')).should.not.be.ok;
          (options.isIncluded('g')).should.not.be.ok;
          return done();
        });
      });
      return describe("array", function() {
        it("exclude", function(done) {
          var options;
          options = new Options({
            exclude: [/^_/, 'g']
          });
          (options.isIncluded('f')).should.be.ok;
          (options.isIncluded('_f')).should.not.be.ok;
          (options.isIncluded('g')).should.not.be.ok;
          return done();
        });
        return it("include", function(done) {
          var options;
          options = new Options({
            exclude: '*',
            include: ['g', /^_/]
          });
          (options.isIncluded('f')).should.not.be.ok;
          (options.isIncluded('g')).should.be.ok;
          (options.isIncluded('_f')).should.be.ok;
          return done();
        });
      });
    });
    describe("numOfParams", function() {
      it("function mode", function(done) {
        var options;
        options = new Options({
          num_of_args: 5
        });
        options.numOfParams().should.equal(5);
        (options.numOfParams(void 0)).should.equal(5);
        return done();
      });
      return it("object mode", function(done) {
        var options;
        options = new Options({
          num_of_args: {
            f: 5
          }
        });
        (options.numOfParams('f')).should.equal(5);
        should.not.exist(options.numOfParams('g'));
        return done();
      });
    });
    describe("errorType", function() {
      return it("function mode", function(done) {
        var options;
        options = new Options({
          error_type: 'callback'
        });
        options.errorType().should.equal('callback');
        return done();
      });
    });
    return describe("mode", function() {
      var test;
      test = function(mode, expected, label) {
        if (label == null) {
          label = "" + mode;
        }
        return it(label, function(done) {
          var options;
          if (mode == null) {
            options = new Options({});
          }
          if (mode != null) {
            options = new Options({
              mode: mode
            });
          }
          options.mode().should.eql(expected);
          return done();
        });
      };
      test(void 0, ['sync'], 'default');
      test(['sync'], ['sync']);
      test('sync', ['sync'], 'sync (string)');
      test(['sync', 'args'], ['sync']);
      test(['mixed'], ['mixed', 'args']);
      test('mixed', ['mixed', 'args'], 'mixed (string)');
      test(['async'], ['async']);
      test('async', ['async'], 'async (string)');
      test(['async', 'args'], ['async']);
      test(['sync', 'mixed'], ['mixed', 'args']);
      test(['mixed', 'fibers'], ['mixed', 'fibers']);
      test(['mixed', 'fibers', 'args'], ['mixed', 'args']);
      return test(['mixed', 'fibers', 'args', 'sync'], ['sync']);
    });
  });

}).call(this);
